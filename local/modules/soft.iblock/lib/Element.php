<?php namespace Soft;

use Bitrix\Main\Application;
use Bitrix\Main\Entity;
use Bitrix\Main\Type;
use Bitrix\Main\Loader;

Loader::includeModule('iblock');

/**
 * Class Element
 * @package Alvitek\Blocks
 */
class Element extends Entity\DataManager
{
	/** @var null|BaseController  */
	protected static $BaseController = null;
	/** @var  Entity\Base */
	protected static $propEntity;
	/** @var  Entity\Query */
	protected static $propQuery;
	/** @var  Entity\Query */
	protected static $ElementQuery;
	/**
	 * Element constructor.
	 *
	 * @param array $params
	 */
	public function __construct($params = [])
	{
		self::setBaseController(new BaseController($params));
	}

	public static function setElementQuery($params = [])
	{
		$BaseController = self::getBaseController();
		if(!$BaseController instanceof BaseController || is_null($BaseController)){
			self::setBaseController(new BaseController($params));
			$BaseController = self::getBaseController();
		}

		if(count($params) > 0){
			$BaseController->setParams($params);
		}

		$entity = $BaseController->init();

		self::enumSelect();
		self::$ElementQuery = $BaseController->appendQuery($entity);
	}

	/**
	 * @method getList
	 * @param array $params
	 *
	 * @return \Bitrix\Main\DB\Result
	 * @throws \Bitrix\Main\ArgumentException
	 */
	public static function getList($params = [])
	{
		self::setElementQuery($params);
		$query = self::getElementQuery();

		$obElements = $query->exec();

		return $obElements;
	}

	public static function getRow($parameters = [])
	{
		$parameters['limit'] = 1;
		return self::getList($parameters)->fetch();
	}

	public static function getRowById($id)
	{
		return parent::getRowById($id); // TODO: Change the autogenerated stub
	}

	/**
	 * @method getIblockByIdElement
	 * @param int $id
	 *
	 * @return int
	 * @throws IBlockException
	 */
	public static function getIblockByIdElement($id)
	{
		if(intval($id) == 0){
			throw new IBlockException('ELEMENT_ID is null');
		}

		$sql = 'SELECT IBLOCK_ID
				FROM b_iblock_element
				WHERE ID = '.$id.';';
		$res = Application::getConnection()->query($sql)->fetch();

		return $res['IBLOCK_ID'];
	}


	/**
	 * @method enumSelect
	 */
	protected static function enumSelect()
	{
		$resultEnums = [];
		$arEnumProps = BaseQuery::getPropertyEnums();
		if(count($arEnumProps) > 0){
			$connect = \Bitrix\Main\Application::getConnection();
			$enumSql = "
					SELECT
						BENUM.ID, BENUM.VALUE, BENUM.PROPERTY_ID, BPROP.CODE
					FROM b_iblock_property_enum BENUM
					LEFT JOIN b_iblock_property BPROP ON BENUM.PROPERTY_ID = BPROP.ID
					WHERE PROPERTY_ID in (".implode(',',$arEnumProps).");";

			$obEnums = $connect->query($enumSql);
			while($enum = $obEnums->fetch()){
				$resultEnums[$enum['CODE']][$enum['ID']] = $enum['VALUE'];
			}
			BaseQuery::setPropertyEnumsVal($resultEnums);
		}
	}

	public static function getProperty($params = [])
	{
		$params = self::checkPropertySelect($params);

		$Query = self::getPropertyQuery($params);
		$obProperty = $Query->exec();

//		$obProperty->addFetchDataModifier(array(__CLASS__, 'fetchModProperty'));

		if($obProperty->getCount() > 1){
			return $obProperty->fetchAll();
		} else {
			return $obProperty->fetch();
		}
	}

	public static function fetchModProperty($data = [])
	{

	}

	/**
	 * @method getPropertyQuery
	 * @param array $params
	 *
	 * @return Entity\Query
	 * @throws IBlockException
	 */
	public static function getPropertyQuery($params = [])
	{
		$params = self::checkPropertySelect($params);

		self::makeQuery($params, $params['IBLOCK_ID']);

		return self::$propQuery;
	}

	protected static function checkPropertySelect($params = [])
	{
		if(intval($params['IBLOCK_ID']) == 0)
			$params['IBLOCK_ID'] = self::getBaseController()->getIblock();

		if($params['IBLOCK_ID'] == 0)
			throw new IBlockException('IBLOCK_ID must be integer and > 0');

		if(strlen($params['CODE']) == 0)
			throw new IBlockException('CODE must be string - symbolic code of property');

		if(intval($params['ELEMENT_ID']) == 0)
			throw new IBlockException('ELEMENT_ID must be integer and > 0');

		return $params;
	}

	protected static function makeQuery($params, $iblock)
	{
		$code = $params['CODE'];

		$Property = new Property(array($code => array()));
		$propEntityName = 'Property'.$iblock;
		$propEntityFullName = '\\'.__NAMESPACE__.'\\'.$propEntityName;
		if(Entity\Base::isExists($propEntityFullName)){
			$entity = Entity\Base::getInstance($propEntityFullName);
			$Property->setEntity($entity);
		} else {
			$Property->compileEntity($iblock);
		}

		$meta = $Property->getMetaProperty($iblock);
		$Property->setProperty(array($code => $meta[$code]));
		$arProperty = $meta[$params['CODE']];
		if(empty($arProperty)){
			// TODO ��������� �������� �� ����� ����� ��-�� �� CODE � ������ ���� � Property->getMetaProperty()
			throw new IBlockException('CODE = '.$code.' not found in iblock = '.$iblock);
		}

		$Property->addFieldToEntity($arProperty, $code);
		$entity = $Property->getEntity();

		$select = [];

		foreach ($arProperty as $k => $value) {
			if($value instanceof Type\DateTime){
				$value = $value->format('d.m.Y H:i:s');
			}

			$entity->addField(new Entity\ExpressionField($k, "'{$value}'"));
			$select[] = $k;
		}

		$select[] = 'IBLOCK_ELEMENT_ID';

		$Query = new Entity\Query($entity);
		$Query->setSelect($select);

		if($entity->getField($code) instanceof Entity\ReferenceField){
			if($arProperty['MULTIPLE'] != 'Y'){
				switch($arProperty['PROPERTY_TYPE']){
					case 'E':
						$Query->addSelect(new Entity\ExpressionField('VALUE','%s', $code.'.NAME'));
						break;
					case 'L':
						$Query->addSelect(new Entity\ExpressionField('VALUE','%s', $code.'.VALUE'));
						break;
					default:
//					    $Query->addSelect($code, 'VALUE');
						break;
				}
			} else {
				switch($arProperty['PROPERTY_TYPE']){
					case 'E':
						$Query->addSelect(new Entity\ExpressionField('VALUE','%s', $code.'.E.NAME'));
						break;
					case 'L':
						$Query->addSelect(new Entity\ExpressionField('VALUE','%s', $code.'.L.VALUE'));
						break;
					default:
						$Query->addSelect(new Entity\ExpressionField('VALUE','%s', $code.'.VALUE'));
						break;
				}
			}
			$Query->addSelect($code, 'VALUE_');
		} else {
			$Query->addSelect($code, 'VALUE');
		}
		$Query->setFilter(['IBLOCK_ELEMENT_ID'=>$params['ELEMENT_ID']]);
		$Query->countTotal(true);

		self::setPropQuery($Query);
	}

	public function getPageUrl($use_tilda = false)
	{
		static $arSectionPathCache = array();
		$res = true;
		if($res)
		{
			//Handle List URL for Element, Section or IBlock
			if($this->strListUrl)
				$TEMPLATE = $this->strListUrl;
			elseif(array_key_exists("~LIST_PAGE_URL", $res))
				$TEMPLATE = $res["~LIST_PAGE_URL"];
			elseif(!$use_tilda && array_key_exists("LIST_PAGE_URL", $res))
				$TEMPLATE = $res["LIST_PAGE_URL"];
			else
				$TEMPLATE = "";

			if($TEMPLATE)
			{
				$res_tmp = $res;
				if((intval($res["IBLOCK_ID"]) <= 0) && (intval($res["ID"]) > 0))
				{
					$res_tmp["IBLOCK_ID"] = $res["ID"];
					$res_tmp["IBLOCK_CODE"] = $res["CODE"];
					$res_tmp["IBLOCK_EXTERNAL_ID"] = $res["EXTERNAL_ID"];
					if($use_tilda)
					{
						$res_tmp["~IBLOCK_ID"] = $res["~ID"];
						$res_tmp["~IBLOCK_CODE"] = $res["~CODE"];
						$res_tmp["~IBLOCK_EXTERNAL_ID"] = $res["~EXTERNAL_ID"];
					}
				}

				if($use_tilda)
				{
					$res["~LIST_PAGE_URL"] = \CIBlock::ReplaceDetailUrl($TEMPLATE, $res_tmp, true, false);
					$res["LIST_PAGE_URL"] = htmlspecialcharsbx($res["~LIST_PAGE_URL"]);
				}
				else
				{
					$res["LIST_PAGE_URL"] = \CIBlock::ReplaceDetailUrl($TEMPLATE, $res_tmp, true, false);
				}
			}

			//If this is Element or Section then process it's detail and section URLs
			if(strlen($res["IBLOCK_ID"]))
			{

				if(array_key_exists("GLOBAL_ACTIVE", $res))
					$type = "S";
				else
					$type = "E";

				if($this->strDetailUrl)
					$TEMPLATE = $this->strDetailUrl;
				elseif(array_key_exists("~DETAIL_PAGE_URL", $res))
					$TEMPLATE = $res["~DETAIL_PAGE_URL"];
				elseif(!$use_tilda && array_key_exists("DETAIL_PAGE_URL", $res))
					$TEMPLATE = $res["DETAIL_PAGE_URL"];
				else
					$TEMPLATE = "";

				if($TEMPLATE)
				{
					if($this->arSectionContext)
					{
						$TEMPLATE = str_replace("#SECTION_ID#", $this->arSectionContext["ID"], $TEMPLATE);
						$TEMPLATE = str_replace("#SECTION_CODE#", $this->arSectionContext["CODE"], $TEMPLATE);
						if(
								$this->arSectionContext["ID"] > 0
								&& $this->arSectionContext["IBLOCK_ID"] > 0
								&& strpos($TEMPLATE, "#SECTION_CODE_PATH#") !== false
						)
						{
							if(!array_key_exists($this->arSectionContext["ID"], $arSectionPathCache))
							{
								$rs = \CIBlockSection::GetNavChain($this->arSectionContext["IBLOCK_ID"], $this->arSectionContext["ID"], array("ID", "IBLOCK_SECTION_ID", "CODE"));
								while ($a = $rs->Fetch())
									$arSectionPathCache[$this->arSectionContext["ID"]] .= urlencode($a["CODE"])."/";

							}
							if(isset($arSectionPathCache[$this->arSectionContext["ID"]]))
								$SECTION_CODE_PATH = rtrim($arSectionPathCache[$this->arSectionContext["ID"]], "/");
							else
								$SECTION_CODE_PATH = "";
							$TEMPLATE = str_replace("#SECTION_CODE_PATH#", $SECTION_CODE_PATH, $TEMPLATE);
						}
					}

					if($use_tilda)
					{
						$res["~DETAIL_PAGE_URL"] = \CIBlock::ReplaceDetailUrl($TEMPLATE, $res, true, $type);
						$res["DETAIL_PAGE_URL"] = htmlspecialcharsbx($res["~DETAIL_PAGE_URL"]);
					}
					else
					{
						$res["DETAIL_PAGE_URL"] = \CIBlock::ReplaceDetailUrl($TEMPLATE, $res, true, $type);
					}
				}

				if($this->strSectionUrl)
					$TEMPLATE = $this->strSectionUrl;
				elseif(array_key_exists("~SECTION_PAGE_URL", $res))
					$TEMPLATE = $res["~SECTION_PAGE_URL"];
				elseif(!$use_tilda && array_key_exists("SECTION_PAGE_URL", $res))
					$TEMPLATE = $res["SECTION_PAGE_URL"];
				else
					$TEMPLATE = "";

				if($TEMPLATE)
				{
					if($use_tilda)
					{
						$res["~SECTION_PAGE_URL"] = \CIBlock::ReplaceSectionUrl($TEMPLATE, $res, true, $type);
						$res["SECTION_PAGE_URL"] = htmlspecialcharsbx($res["~SECTION_PAGE_URL"]);
					}
					else
					{
						$res["SECTION_PAGE_URL"] = \CIBlock::ReplaceSectionUrl($TEMPLATE, $res, true, $type);
					}
				}
			}

			if(array_key_exists("~CANONICAL_PAGE_URL", $res))
				$TEMPLATE = $res["~CANONICAL_PAGE_URL"];
			elseif(!$use_tilda && array_key_exists("CANONICAL_PAGE_URL", $res))
				$TEMPLATE = $res["CANONICAL_PAGE_URL"];
			else
				$TEMPLATE = "";

			if($TEMPLATE)
			{
				if($use_tilda)
				{
					$res["~CANONICAL_PAGE_URL"] = \CIBlock::ReplaceDetailUrl($TEMPLATE, $res, true, "E");
					$res["CANONICAL_PAGE_URL"] = htmlspecialcharsbx($res["~CANONICAL_PAGE_URL"]);
				}
				else
				{
					$res["CANONICAL_PAGE_URL"] = \CIBlock::ReplaceDetailUrl($TEMPLATE, $res, true, "E");
				}
			}
		}
		return $res;
	}

	/**
	 * @method getQueryStr
	 *
	 * @return string
	 */
	public static function getQueryStr()
	{
		return self::getElementQuery()->getQuery();
	}

	/**
	 * @method getPropEntity - get param propEntity
	 * @return Entity\Base
	 */
	public static function getPropEntity()
	{
		return self::$propEntity;
	}

	/**
	 * @method setPropEntity - set param PropEntity
	 * @param Entity\Base $propEntity
	 */
	public static function setPropEntity(Entity\Base $propEntity)
	{
		self::$propEntity = $propEntity;
	}

	/**
	 * @method getBaseController - get param BaseController
	 * @return BaseController
	 */
	public static function getBaseController()
	{
		return self::$BaseController;
	}

	/**
	 * @method setBaseController - set param BaseController
	 * @param BaseController $BaseController
	 */
	public static function setBaseController(BaseController $BaseController)
	{
		self::$BaseController = $BaseController;
	}

	/**
	 * @method setPropQuery - set param PropQuery
	 * @param Entity\Query $propQuery
	 */
	public static function setPropQuery($propQuery)
	{
		self::$propQuery = $propQuery;
	}

	/**
	 * @method getElementQuery - get param ElementQuery
	 * @return Entity\Query
	 */
	public static function getElementQuery()
	{
		return self::$ElementQuery;
	}

}